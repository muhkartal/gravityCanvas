name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  AWS_REGION: 'us-east-1'
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  BACKEND_ECR_REPOSITORY: gravity-canvas-backend
  FRONTEND_ECR_REPOSITORY: gravity-canvas-frontend

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run tests
        run: npm run test:coverage

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: frontend

  test-backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: gravity_canvas_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run backend linting
        working-directory: ./backend
        run: npm run lint

      - name: Run backend type checking
        working-directory: ./backend
        run: npm run type-check

      - name: Run backend tests
        working-directory: ./backend
        run: npm run test:coverage
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/gravity_canvas_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret

      - name: Upload backend test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Setup Node.js for security audit
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Frontend security audit
        run: |
          npm audit --audit-level=high
          
      - name: Backend security audit
        working-directory: ./backend
        run: |
          npm audit --audit-level=high

  build-and-push:
    needs: [test-frontend, test-backend, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      backend-image: ${{ steps.backend-image.outputs.image }}
      frontend-image: ${{ steps.frontend-image.outputs.image }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push backend image
        id: backend-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd backend
          docker build -t $ECR_REGISTRY/$BACKEND_ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$BACKEND_ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$BACKEND_ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$BACKEND_ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$BACKEND_ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build and push frontend image
        id: frontend-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install CDK dependencies
        working-directory: ./aws-infrastructure
        run: npm ci

      - name: Deploy to staging
        working-directory: ./aws-infrastructure
        run: |
          npx cdk deploy GravityCanvas-staging --require-approval never
        env:
          CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
          CDK_DEFAULT_REGION: ${{ env.AWS_REGION }}

      - name: Update ECS service with new image
        run: |
          aws ecs update-service \
            --cluster GravityCanvas-staging-GravityCanvasCluster \
            --service GravityCanvas-staging-BackendService \
            --force-new-deployment

      - name: Deploy frontend to S3
        run: |
          npm ci
          npm run build
          aws s3 sync dist/ s3://${{ secrets.STAGING_S3_BUCKET }} --delete
          aws cloudfront create-invalidation --distribution-id ${{ secrets.STAGING_CLOUDFRONT_ID }} --paths "/*"

  deploy-production:
    needs: [build-and-push, deploy-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install CDK dependencies
        working-directory: ./aws-infrastructure
        run: npm ci

      - name: Deploy to production
        working-directory: ./aws-infrastructure
        run: |
          npx cdk deploy GravityCanvas-prod --require-approval never
        env:
          CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
          CDK_DEFAULT_REGION: ${{ env.AWS_REGION }}

      - name: Update ECS service with new image
        run: |
          aws ecs update-service \
            --cluster GravityCanvas-prod-GravityCanvasCluster \
            --service GravityCanvas-prod-BackendService \
            --force-new-deployment

      - name: Deploy frontend to S3
        run: |
          npm ci
          npm run build
          aws s3 sync dist/ s3://${{ secrets.PRODUCTION_S3_BUCKET }} --delete
          aws cloudfront create-invalidation --distribution-id ${{ secrets.PRODUCTION_CLOUDFRONT_ID }} --paths "/*"

      - name: Health check
        run: |
          echo "Waiting for deployment to be healthy..."
          sleep 60
          
          BACKEND_URL="${{ secrets.PRODUCTION_BACKEND_URL }}"
          FRONTEND_URL="${{ secrets.PRODUCTION_FRONTEND_URL }}"
          
          # Check backend health
          if curl -f "$BACKEND_URL/health"; then
            echo "Backend health check passed"
          else
            echo "Backend health check failed"
            exit 1
          fi
          
          # Check frontend
          if curl -f "$FRONTEND_URL"; then
            echo "Frontend health check passed"
          else
            echo "Frontend health check failed"
            exit 1
          fi

  cleanup:
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Clean up old ECR images
        run: |
          # Keep last 10 images, delete older ones
          aws ecr describe-images \
            --repository-name $BACKEND_ECR_REPOSITORY \
            --query 'sort_by(imageDetails,& imagePushedAt)[:-10].[imageDigest]' \
            --output text | \
          while read digest; do
            if [ ! -z "$digest" ]; then
              aws ecr batch-delete-image \
                --repository-name $BACKEND_ECR_REPOSITORY \
                --image-ids imageDigest=$digest
            fi
          done
          
          aws ecr describe-images \
            --repository-name $FRONTEND_ECR_REPOSITORY \
            --query 'sort_by(imageDetails,& imagePushedAt)[:-10].[imageDigest]' \
            --output text | \
          while read digest; do
            if [ ! -z "$digest" ]; then
              aws ecr batch-delete-image \
                --repository-name $FRONTEND_ECR_REPOSITORY \
                --image-ids imageDigest=$digest
            fi
          done
